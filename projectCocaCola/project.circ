<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="facing" val="south"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(1110,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="AT"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1110,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="RM"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1110,560)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="FS"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1110,650)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="AM"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(210,240)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="fo"/>
    </comp>
    <comp lib="0" loc="(210,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="f1"/>
    </comp>
    <comp lib="0" loc="(210,420)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="f2"/>
    </comp>
    <comp lib="0" loc="(210,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Reset"/>
    </comp>
    <comp lib="0" loc="(270,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="f4"/>
    </comp>
    <comp lib="0" loc="(310,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="south"/>
      <a name="label" val="f3"/>
    </comp>
    <comp lib="1" loc="(740,560)" name="NOT Gate"/>
    <comp loc="(1090,300)" name="changeComponent">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(560,240)" name="coinAccept">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(560,330)" name="coinAccept">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(560,420)" name="coinAccept">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(560,560)" name="stockCheck">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(560,650)" name="coinAcceptSignal">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(850,300)" name="adder">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1090,300)" to="(1110,300)"/>
    <wire from="(1090,320)" to="(1090,450)"/>
    <wire from="(1090,450)" to="(1090,610)"/>
    <wire from="(210,240)" to="(250,240)"/>
    <wire from="(210,330)" to="(240,330)"/>
    <wire from="(210,420)" to="(230,420)"/>
    <wire from="(210,520)" to="(610,520)"/>
    <wire from="(230,420)" to="(230,650)"/>
    <wire from="(230,420)" to="(340,420)"/>
    <wire from="(230,650)" to="(340,650)"/>
    <wire from="(240,330)" to="(240,670)"/>
    <wire from="(240,330)" to="(340,330)"/>
    <wire from="(240,670)" to="(340,670)"/>
    <wire from="(250,240)" to="(250,690)"/>
    <wire from="(250,240)" to="(340,240)"/>
    <wire from="(250,690)" to="(340,690)"/>
    <wire from="(270,180)" to="(270,260)"/>
    <wire from="(270,260)" to="(270,350)"/>
    <wire from="(270,260)" to="(340,260)"/>
    <wire from="(270,350)" to="(270,440)"/>
    <wire from="(270,350)" to="(340,350)"/>
    <wire from="(270,440)" to="(340,440)"/>
    <wire from="(310,180)" to="(310,280)"/>
    <wire from="(310,280)" to="(310,370)"/>
    <wire from="(310,280)" to="(340,280)"/>
    <wire from="(310,370)" to="(310,460)"/>
    <wire from="(310,370)" to="(340,370)"/>
    <wire from="(310,460)" to="(310,710)"/>
    <wire from="(310,460)" to="(340,460)"/>
    <wire from="(310,710)" to="(340,710)"/>
    <wire from="(320,560)" to="(320,610)"/>
    <wire from="(320,560)" to="(340,560)"/>
    <wire from="(320,610)" to="(1090,610)"/>
    <wire from="(560,240)" to="(600,240)"/>
    <wire from="(560,330)" to="(590,330)"/>
    <wire from="(560,380)" to="(560,420)"/>
    <wire from="(560,380)" to="(630,380)"/>
    <wire from="(560,560)" to="(620,560)"/>
    <wire from="(560,650)" to="(1110,650)"/>
    <wire from="(590,330)" to="(590,360)"/>
    <wire from="(590,360)" to="(630,360)"/>
    <wire from="(600,240)" to="(600,340)"/>
    <wire from="(600,340)" to="(630,340)"/>
    <wire from="(610,320)" to="(610,520)"/>
    <wire from="(610,320)" to="(630,320)"/>
    <wire from="(610,520)" to="(1110,520)"/>
    <wire from="(620,300)" to="(620,560)"/>
    <wire from="(620,300)" to="(630,300)"/>
    <wire from="(620,560)" to="(710,560)"/>
    <wire from="(630,400)" to="(630,450)"/>
    <wire from="(630,450)" to="(1090,450)"/>
    <wire from="(740,560)" to="(1110,560)"/>
    <wire from="(850,300)" to="(870,300)"/>
  </circuit>
  <vhdl name="coinAccept">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity coinAccept is
    port(
        coin: in std_logic;
        accept: in std_logic;
        refuse: in std_logic;
        result: out std_logic
    );
end coinAccept;

architecture Behavioral of coinAccept is

begin
    process(coin) begin
    		result &lt;= '0';
        if rising_edge(coin) then
            if accept = '1' and refuse = '0' then
            	result &lt;= '0';
               result &lt;= '1';
            elsif accept = '0' and refuse = '1' then
               result &lt;= '0';
            end if;
        end if;
    end process;
end Behavioral;
</vhdl>
  <vhdl name="adder">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity adder is
    Port (
        enable: in std_logic;
        reset : in std_logic;
        f0: in std_logic;
        f1: in std_logic;
        f2: in std_logic;
        sold: in std_logic;
        output_sum : out std_logic_vector(7 downto 0)
    );
end adder;

architecture Behavioral of adder is
    signal sum_reg : unsigned(7 downto 0) := "00000000";
begin
    process(f0, f1, f2, reset, sold)
    begin
   		if reset = '1' then
            sum_reg &lt;= "00000000";
        elsif sold = '1' then
            sum_reg &lt;= sum_reg - 100;
   		elsif enable = '1' then
            if rising_edge(f0) then
                sum_reg &lt;= sum_reg + 5;
            elsif rising_edge(f1) then
                sum_reg &lt;= sum_reg + 10;
            elsif rising_edge(f2) then
                sum_reg &lt;= sum_reg + 50;
            end if;
        end if;
    end process;
    
    output_sum &lt;= std_logic_vector(sum_reg);
end Behavioral;
</vhdl>
  <vhdl name="changeComponent">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY changeComponent IS
	PORT (
		sum: in std_logic_vector(7 downto 0);
		change: out std_logic_vector(7 downto 0);
		cokeDispence: out std_logic
	);
END changeComponent;

ARCHITECTURE TypeArchitecture OF changeComponent IS
	signal temp : unsigned(7 downto 0);
BEGIN
	process(sum)
	begin
		if unsigned(sum) &gt;= 100 then
			cokeDispence &lt;= '1';
			change &lt;= std_logic_vector(unsigned(sum) - 100);
		else
			cokeDispence &lt;= '0';
			change &lt;= sum;
		end if;
	end process;
END TypeArchitecture;
</vhdl>
  <vhdl name="coinAcceptSignal">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity coinAcceptSignal is
    port(
        a: in std_logic;
        b: in std_logic;
        c: in std_logic;
        notAllowed: in std_logic;
        am: out std_logic
    );
end coinAcceptSignal;

architecture Behavioral of coinAcceptSignal is

begin
process(a, b, c, notAllowed) begin
	if notAllowed = '1' then
		am &lt;= '0';
	else
	    if a'event and a = '1' then
	        am &lt;= '1';
	    elsif a'event and a = '0' then
	        am &lt;= '0';
	    end if;
	    if b'event and b = '1' then
	        am &lt;= '1';
	    elsif b'event and b = '0' then
	        am &lt;= '0';
	    end if;
	    if c'event and c = '1' then
	        am &lt;= '1';
	    elsif c'event and c = '0' then
	        am &lt;= '0';
	    end if;
	end if;
end process;
end Behavioral;
</vhdl>
  <vhdl name="stockCheck">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY stockCheck IS
  PORT (
  	clkDecrease: in std_logic;
  	availableStock: out std_logic
    );
END stockCheck;

ARCHITECTURE TypeArchitecture OF stockCheck IS

signal stock: integer := 10;

BEGIN
	process(clkDecrease) begin


        if rising_edge(clkDecrease) then
                stock &lt;= stock - 1;
        end if;
        if stock &gt; 0 then
            availableStock &lt;= '1';
        else
            availableStock &lt;= '0';
        end if;
	end process;
END TypeArchitecture;
</vhdl>
</project>
